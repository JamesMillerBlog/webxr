service: ${file(./../../serverless.env.json):service_name}-${file(./../../serverless.env.json):stage}-${self:custom.service}
useDotenv: true

provider:
  environment: ${file(./../../serverless.env.json)}
  name: aws
  region: ${file(./../../serverless.env.json):region}
  runtime: nodejs18.x
  stage: ${file(./../../serverless.env.json):stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"

  websocketsApiRouteSelectionExpression: $request.body.action

functions:
  - ${file(default/lambda.yml)}
  - ${file(connect/lambda.yml)}
  - ${file(disconnect/lambda.yml)}
  - ${file(positions/lambda.yml)}

plugins:
  - serverless-offline
  - serverless-domain-manager

custom:
  service: sockets
  serverless-offline:
    host: "0.0.0.0"
  customDomain:
    websocket:
      domainName: ws.${file(./../../serverless.env.json):domain_name}
      stage: ${file(./../../serverless.env.json):stage}
      basePath: ""
      certificateName: " ws.${file(./../../serverless.env.json):domain_name}"
      createRoute53Record: true
      endpointType: "regional"
      enabled: true
      securityPolicy: tls_1_2
