service: ${file(./../../../serverless.env.json):service_name}-${file(./../../../serverless.env.json):stage}

provider:
  environment: ${file(./../../../serverless.env.json)}
  name: aws
  region: ${file(./../../../serverless.env.json):region}
  runtime: nodejs18.x
  stage: ${file(./../../../serverless.env.json):stage}
  apiGateway: # Optional API Gateway global config
    restApiId: ${file(./../../../serverless.env.json):api_gateway_rest_api_id} # REST API resource ID. Default is generated by the framework
    restApiRootResourceId: ${file(./../../../serverless.env.json):api_gateway_root_resource_id} # Root resource ID, represent as / path
  # httpApi:
  #   cors: true
  #   allowedHeaders:
  #       - Content-Type
  #       - Authorization
  #   authorizers:
  #     serviceAuthorizer:
  #       identiySource: $request.header.Authorization
  #       issuerUrl: https://cognito-idp.eu-west-2.amazonaws.com/eu-west-2_hdfdhfJkX
  #       audience: 2ldfeatqdrkfl3nmu3nrk08n45
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"

custom:
  apiAuthorizer:
    id: ${file(./../../../serverless.env.json):cognito_authorizer}
  serverless-offline:
    host: "0.0.0.0"
    httpsProtocol: ./../../../cert
# lambdaPolicyXRay:
# Effect: Allow
# Action:
#   - xray:PutTraceSegments
#   - xray:PutTelemetryRecords
# Resource: "*"
